
    <%= stylesheet_link_tag "fileupload/fileupload-ui" %>
    <%= stylesheet_link_tag "fileupload/bootstrap_and_overrides" %>



    <%# javascript_include_tag "jquery.min" %>
    <%= javascript_include_tag "fileupload/vendor/jquery.ui.widget" %>
    <%# javascript_include_tag "fileupload/vendor/load-image" %>
    <%# javascript_include_tag "fileupload/vendor/canvas-to-blob" %>
    <%= javascript_include_tag "fileupload/vendor/tmpl" %>

    <%# iframe-transport is ajax file upload support for IE, Uncomment if needed %>
        <%# javascript_include_tag "fileupload/jquery.iframe-transport" %>

    <%= javascript_include_tag "fileupload/jquery.fileupload" %>
    <%= javascript_include_tag "fileupload/jquery.fileupload-ui" %>
    <%= javascript_include_tag "gps-exif" %>

    <% form_for(:warpable, :url => "/warper/#{@map_id}", :html => { :multipart => true,:id => "fileupload" }) do |f| -%>     
    <input id="warpable_map_id" name="map_id" type="hidden" value="<%= @map_id %>" />
		  <p>
		    <label for="warpable">Choose a file from your computer (10mb max):</label>		    
		  </p>

    <div class="row fileupload-buttonbar">
      <div class="span7">
        <!-- The fileinput-button span is used to style the file input field as button -->
        <span class="btn btn-success fileinput-button">
          <span>Add Image</span>         
		<input id="warpable_uploaded_data" name="warpable[uploaded_data]" type="file" />
        </span>
      </div>
    </div>
    <!-- The loading indicator is shown during image processing -->
    <div class="fileupload-loading"></div>
    <br>
    <!-- The table listing the files available for upload/download -->
    <div class="scrollWrapper">
    <table class="table table-striped"><tbody class="files" data-toggle="modal-gallery" data-target="#modal-gallery"></tbody>
    </table>
   </div>
  <% end %>

</div>
<script>
window.locale = {
    "fileupload": {
        "errors": {
            "maxFileSize": "File is too big",
            "minFileSize": "File is too small",
            "acceptFileTypes": "Filetype not allowed",
            "maxNumberOfFiles": "Max number of files exceeded",
            "uploadedBytes": "Uploaded bytes exceed file size",
            "emptyResult": "Empty file upload result"
        },
        "error": "Error",
        "start": "Start",
        "cancel": "Cancel",
        "destroy": "Delete"
    }
};
</script>

<!-- The template to display files available for upload -->
<script id="template-upload" type="text/x-tmpl">
  {% for (var i=0, file; file=o.files[i]; i++) { %}
  <tr class="template-upload fade">
    <td class="preview"><span class="fade"></span></td>
    <td class="name"><span>{%=file.name%}</span></td>
    <td class="size"><span>{%=o.formatFileSize(file.size)%}</span></td>
    {% if (file.error) { %}
    <td class="error" colspan="2"><span class="label label-important">{%=locale.fileupload.error%}</span> {%=locale.fileupload.errors[file.error] || file.error%}</td>
    {% } else if (o.files.valid && !i) { %}
    <td>


    <div id="spinner" class="spinner">
        <img id="img-spinner" src="/images/spinner.gif" alt="Loading"/>
    </div>

    </td>
    <td class="start">{% if (!o.options.autoUpload) { %}
      <button class="btn btn-primary">
        <span>{%=locale.fileupload.start%}</span>
      </button>
      {% } %}</td>
    {% } else { %}
    <td colspan="2"></td>
    {% } %}
    <td class="cancel">{% if (!i) { %}
      <button class="btn btn-warning">
        <span>{%=locale.fileupload.cancel%}</span>
      </button>
      {% } %}</td>
  </tr>
  {% } %}
</script>
<!-- The template to display files available for download -->
<script id="template-download" type="text/x-tmpl">
  {% for (var i=0, file; file=o.files[i]; i++) { %}
    <tr class="template-download fade">
      {% if (file.error) { %}
        <td></td>
        <td class="name"><span>{%=file.name%}</span></td>
        <td class="size"><span>{%=o.formatFileSize(file.size)%}</span></td>
     <td class="error" colspan="2"><span class="label label-important">{%=locale.fileupload.error%}</span> {%=locale.fileupload.errors[file.error] || file.error%}</td>
        {% } else { %}

        <td class="preview">{% if (file.thumbnail_url) { %}
          <a href="{%=file.url%}" title="{%=file.name%}" rel="gallery" download="{%=file.name%}"><img src="{%=file.thumbnail_url%}"></a>
          {% } %}</td>
        <td class="name">
          <a href="{%=file.url%}" title="{%=file.name%}" rel="{%=file.thumbnail_url&&'gallery'%}" download="{%=file.name%}">{%=file.name%}</a>
        </td>
        <td class="size"><span>{%=o.formatFileSize(file.size)%}</span></td>
        <td colspan="2"></td>
        {% } %}
    </tr>

    {% } %}
</script>

<script type="text/javascript" charset="utf-8">
  $(function () {
      // Initialize the jQuery File Upload widget:
    $('#fileupload').fileupload({      // Change the default parameters name from files[]
      paramName:  'warpable[uploaded_data]',
      autoUpload: 'true',
      acceptFileTypes: /(\.|\/)(gif|jpe?g|png)$/i,
      maxFileSize: 10000000 });
    formData = $('form').serializeArray(); 
      
      $.getJSON($('#fileupload').prop('action'), function (files) {

        var fu = $('#fileupload').data('blueimpFileupload'), 
          template;
       // fu._adjustMaxNumberOfFiles(-files.length);
        console.log(files);
        template = fu._renderDownload(files)
          .appendTo($('#fileupload .files'));
        // Force reflow:
        fu._reflow = fu._transition && template.length &&
          template[0].offsetWidth;
        template.addClass('in');

        $('#loading').remove();

      });


      $('#fileupload').bind('fileuploaddone', function (e, data) { 
        console.log(data.result.files);
        EXIF.getData(data.files[0], function(){
          var GPS = EXIF.getGPSTags(this), latitude, longitude; 
        
          if (typeof window.FileReader !== 'function') {
            //We cannot correct image based on altitude if the image dimensions are not known.
            console.log("File API is not supported by this browser");

            latitude = (GPS["GPSLatitude"][0]) + (GPS["GPSLatitude"][1]/60) + (GPS["GPSLatitude"][2]/3600);
            longitude = (GPS["GPSLongitude"][0]) + (GPS["GPSLongitude"][1]/60) + (GPS["GPSLongitude"][2]/3600);
            parent.Warper.new_image_GPS(data.result.files[0].url, data.result.files[0].id, GPS);
            }

        else{
            var reader  = new FileReader();
            reader.onload   = function(e){
                var image   = new Image();
                image.onload    = function(){
                    console.log("(':"+this.width+","+this.height+":')");

                    //Place with GPS data if available
                    if(typeof GPS["GPSLatitude"] !== 'undefined' && typeof GPS["GPSLongitude"] !== 'undefined' ){
                        latitude = (GPS["GPSLatitude"][0]) + (GPS["GPSLatitude"][1]/60) + (GPS["GPSLatitude"][2]/3600);
                        longitude = (GPS["GPSLongitude"][0]) + (GPS["GPSLongitude"][1]/60) + (GPS["GPSLongitude"][2]/3600);
                        parent.Warper.new_image_GPS(data.result.files[0].url, data.result.files[0].id, GPS, this.height, this.width);
                        }
                    //Fallback to regular placement.  
                    else{
                      	parent.Warper.new_image(data.result.files[0].url,data.result.files[0].id,true); 
                        }
                    };
                image.src = e.target.result;
                };
            }
        reader.readAsDataURL(data.files[0]);
          }); 
      });
      $(document).bind('drop dragover', function (e) {
            e.preventDefault();
            });
  });
</script>
		<p>
			Where can you get images to upload?<br />Read about <a href="http://wiki.grassrootsmapping.org">Grassroots Mapping with Balloons and Kites</a>.
		</p>

